CSCI 344 - Programming Language Concepts - Fall 2020
Assignment A1 (75 points)
Due Friday, Sep 4, 2020

NOTE:
You are to answer each of these questions, indicated by lines following
each '##QUESTION:' line, by entering your corresponding answer lines
FOLLOWING each '##ANSWER:' line.  Please leave whitespace around your
answers so they are easy to read. DO NOT ADD ANY TEXT TO THE '##ANSWER:'
LINE.

Your submission must include this TEXT file, with your answers added as
described above.  Copy this file into a suitable working directory and
edit this file using a text editor (NOT a word processor) by adding your
answers.

DO NOT MAKE ANY CHANGES TO THE QUESTIONS OR OTHER TEXT CONTAINED IN
THIS FILE except for adding your answers to the questions or replacing
obvious directives such as "<replace this ...>" or "**FIXME**".  Be sure
your answers are on lines that *follow* each '##ANSWER:' line.  Add more
whitespace in your answer lines if you need to do so, but LEAVE THE
ORIGINAL FILE CONTENTS AS-IS.

This file (a1) can be found on the CS lab server here:

   /usr/local/pub/plcc/Assignments/A1/a1

As described in the ##SUBMISSION REQUIREMENTS section at the end of this
assignment description, your edited file 'a1' will become part of your
A1.zip myCourses file submission.

##QUESTION 1 (10 pts):
    Write a lexical specification acceptable to PLCC that skips over
    whitespace and skips all characters from a '#' character to the end
    of the line.  The lexical specification should accept the following
    strings as specific tokens:

        this
        that
        the
        other
        thing

    All other strings consisting of letters, digits, and underscores
    should be returned as a single ID token.  You should use appropriate
    token class names for the other tokens. If you encounter anything
    that does not conform to these specifications, it's an error.

    Consider the following input to the scanner (Scan):

        # example input
        this that # the other thing
        otherwise the thing
        that is another thing
        other#other#other#other
        thisthat the end99 12345xxx _!

    The scanner output should look like this:

	THIS 'this'
	THAT 'that'
        ID 'otherwise'
	THE 'the'
	THING 'thing'
	THAT 'that'
	ID 'is'
	ID 'another'
	THING 'thing'
        OTHER 'other'
	ID 'thisthat'
	THE 'the'
	ID 'end99'
	ID '12345xxx'
	ID '_'
	ERROR '!'

    You can test your lexical specification by making a directory
    in which you will do your work: create a 'grammar' file in this
    directory with the specified contents, run the plccmk tool, and
    execute the resulting Scan class in the Java subdirectory.

##ANSWER:

skip NOT_NEEDED '[#].*'
THIS 'this'
THAT 'that'
THE 'the'
OTHER 'other'
THING 'thing'
ID '\w+'
skip WHITESPACE '\s+'

##QUESTION 2 (10 pts):
    Consider the following BNF grammar rule in a PLCC file:

        <blah>:Foo ::= THIS <var> IS <SILLY>

    What (non-abstract) Java class does this grammar rule define,
    and what are its instance variables (a.k.a. fields) and types?
    Write your answer in the form of a Java signature for the constructor
    for the class:

        XXX(AAA aaa, BBB bbb, ...)

    Here XXX is the class name, and the instance variables are aaa
    of type AAA, bbb of type BBB, and so forth.

##ANSWER:

Foo(Var var, Token silly)

##QUESTION 3 (10 pts):
    Repeat the question above, except use the following grammar rule:

        <many> **= THIS <RULE> HAS MULTIPLE OCCURRENCES <of> <stuff>

##ANSWER:

Many(List<Token> ruleList, List<Of> ofList, List<Stuff> stuffList)

##QUESTION 4 (10 pts):
    Repeat the question above, except use the following grammar rule:

        <classes> ::= I AM TAKING <CSCI>c1 <CSCI>c2 AND <CSCI>c3

##ANSWER:

CSCI(Token c1, Token c2, Token c3)

##QUESTION 5 (5 pts):
    Consider what is wrong with the following BNF grammar rule in a
    PLCC file.  You can assume that this line is part of a larger PLCC
    grammar file in which other token specifications and BNF grammar
    rules may appear.  Your answer should be a grammar rule that fixes
    all of the obvious errors on this line and that will be acceptable
    to PLCC. Your answer should keep the essential nature of the original
    grammar rule and must have THE SAME NUMBER OF CHARACTERS (counting
    whitespace).

    Do *not* add or remove any of the '<' or '>' characters. Do *not* try
    to explain your answer.

        <VAR>  := tok <foo>

##ANSWER:

<var>  := TOK <foo>

##QUESTION 6 (10 pts):
    Write a BNF grammar that accepts any string consisting of balanced
    parentheses followed by an at-sign (@). For example,
    the following strings

                  @
                  ()@
                  ()(()(()))@

    are legal, but

                  ())@
                  (@
                  )(@
                  (()@
                  ()

    are not.

    Your BNF grammar rules should use the token names LPAREN, RPAREN,
    and ATSIGN, and must *NOT* use any repeating rules. Use <balanced>
    as the first nonterminal (and hence the start symbol). You should
    be able to define your grammar in just three BNF rules using two
    nonterminals -- <balanced> is one of them. (It is *not* necessary
    to try to make your grammar rules conform to PLCC. In particular,
    you should not provide a token specification section, and you should
    not annotate any class names or field names in your BNF rules.)
    Your answer should be just in terms of BNF grammar rules as described
    in slide set 1.

    [If you feel so inclined, you can create a grammar file acceptable
    to PLCC, so you can check your grammar with actual input strings. If
    you choose to do this, you will need to have a lexical specification
    section in your grammar file that defines the LPAREN, RPAREN, and
    ATSIGN tokens.  However, in your answer below, you should show only
    your BNF grammar rules without any PLCC-specific stuff.]

##ANSWER:

<balanced>                  ::= <brackets> ATSIGN
<brackets>: BracketBig      ::= LPAREN <brackets> RPAREN <brackets>
<brackets>: BracketSmall    ::= LPAREN RPAREN
<brackets>: BracketNull     ::=

##QUESTION 7 (20 pts):
    As we have shown in our class notes (Slide 1.46 and 1.47) and in the
    LON2 subdirectory of the JNotes-Examples directory, we can have the
    Read-eval-print loop print the list of numbers in human-readable form
    by defining an appropriate toString() method in the Lon class. The
    LON2 grammar uses a repeating rule to collect the NUM Token values
    in a list, which we traversed in the toString() method to print
    the values.

    The grammar in the LON code subdirectory of JNotes-Examples also
    recognizes a list of numbers (its set of syntactically correct
    sentences is the same as in LON2), but it does so using a recursive
    grammar rule (<nums>) instead of a repeating rule as in LON2. We
    want to produce output identical to the output of LON2, but using
    the LON grammar rules.

    Start with the original list-of-numbers grammar file in the code
    directory LON. Create a working directory named LON1.5 and copy the
    grammar file from the LON directory into this working directory.

    Add semantics routines to this grammar file -- in the section
    following the grammar rules -- to print the NUM Token values in
    exactly the same way that we accomplished in LON2. To do this,
    add a toString() method in the Lon class to return a string using
    a one-liner, as follows:

        return "( " + nums.toString() + ")";

    Then add a toString() method in each of the Nums subclasses to 
    print the numbers as we have described. You will need separate
    toString() methods in the NumsNode class and the NumsNull class.
    [Hint: these are one-liners, too!]

    Your revised grammar file will have three toString() definitions
    like this:

    Lon
    %%%
        public String toString() {
	    return "( " + nums.toString() + ")";
	}
    %%%

    # the NumsNode class has fields named 'num' and 'nums'
    NumsNode
    %%%
        public String toString() {
	    // **FIXME**
	}
    %%%

    # the NumsNull class has no fields
    NumsNull
    %%%
        public String toString() {
	    // **FIXME**
	}
    %%%

##SUBMISSION
    Do *not* put your LON1.5 grammar file contents here. Instead, see
    the ##SUBMISSION REQUIREMENTS below.

##SUBMISSION REQUIREMENTS
    Create a flat zip file A1.zip (note the capital 'A') containing
    ONLY the following files:

    a1 -- this file, with your answers in each ##ANSWER section
    grammar -- the one you created in Question 7 above

    When you list the contents of your A1.zip file, you should see
    *only* the following files:

        a1
	grammar

##SUBMISSION NOTES:
    Copy this file (a1) to a suitable directory and make changes to
    this file before adding it to your A1.zip file. Do *not* make any
    changes to the file EXCEPT BY ADDING YOUR ANSWERS FOLLOWING EACH OF
    THE ##ANSWER lines.

    A 'flat' zip file contains only files, no directories (or "folders").
    When I unzip your A1.zip submission, I should see *only* the files
    'a1' and 'grammar', and nothing else. In particular, there should
    not be a directory named 'A1' or any other directories.

    Do *not* submit text files with extensions such as 'a1.txt' or
    'grammar.txt'. The Windows operating system often silently adds the
    '.txt' extension to text files, so be sure that these extensions are
    removed when adding them to your zip file. The best way to ensure
    this is to do your work on the CS lab Ubuntu systems and to create
    your zip file there.

    Submit your A1.zip file to your A1 dropbox in MyCourses.
